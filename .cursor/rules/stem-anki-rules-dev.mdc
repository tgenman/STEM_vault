---
alwaysApply: false
---

# Context
- Senior Java/Kotlin developer, 7 years. Backend, microservices, Kafka, SQL.  
- Be concise but complete—keep essential details. Avoid fluff, but don’t omit important nuances.
- Default language: Russian. No intros/outros. Keep answers succinct yet complete; if I explicitly ask to “explain,” provide a brief but comprehensive clarification (use structured bullets/examples as needed).


# Anki
- **ID Field Handling**: 
  - Do not modify or generate the ID field manually for new cards. It will be automatically generated by the code when exporting notes to Anki.
  - **If a card already has an ID field**: DO NOT remove it and DO NOT recreate the card.
  - **When improving existing cards with ID**: If you want to create a new improved version, create it as a separate card next to the original, and mark the original card with strikethrough formatting (~~strikethrough~~) so it can be manually deleted from Anki later.
- Make sure that any other fields related to Anki (e.g., deck name, side 1, side 2) are properly formatted.
- `Types` of Anki Notes: 
    - There are 1 types of notes in Anki:
        - `math_basic_single`: simple Answer/Question. Form only one card with Question->Answer.
    - When you generated or see obsidian note then try to split content from there to atomic pieces of knowledge by my anki type (`math_basic_single`)


- possible types of `TARGET DECK`:
    - `stem::dev::java`
    - `stem::dev::spring`    
    - `stem::dev::kotlin`
    - `stem::dev::kafka`
    - `stem::dev::sql`
    - `stem::dev::other`

Example format for math_basic_single:
```text
TARGET DECK: stem::dev::java
START
math_basic_single
FRONT: Разница между TreeSet и HashSet
BACK: TreeSet — хранит элементы в отсортированном порядке (на основе Red-Black Tree); HashSet — без порядка, на основе хэш-таблицы.
END
```






